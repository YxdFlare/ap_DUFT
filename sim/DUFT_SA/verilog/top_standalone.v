// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="top_standalone,hls_ip_2019_2_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu9eg-ffvb1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=10,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=38,HLS_SYN_LUT=98,HLS_VERSION=2019_2_1}" *)

module top_standalone (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        test_input,
        dut_output,
        dut_output_ap_vld,
        ap_return
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] test_input;
output  [31:0] dut_output;
output   dut_output_ap_vld;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dut_output_ap_vld;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire    ap_CS_fsm_state2;
wire   [31:0] grp_DUFT_ap_ctrl_chain_fu_39_ap_return;
reg   [31:0] tmp_reg_66;
wire    ap_CS_fsm_state4;
wire    grp_DUFT_ap_ctrl_chain_fu_39_ap_ready;
wire    grp_DUFT_ap_ctrl_chain_fu_39_ap_done;
wire    grp_DUFT_ap_ctrl_chain_fu_39_ap_start;
reg    grp_DUFT_ap_ctrl_chain_fu_39_ap_ce;
wire    grp_DUFT_ap_ctrl_chain_fu_39_ap_continue;
reg   [31:0] grp_DUFT_ap_ctrl_chain_fu_39_addr;
reg   [31:0] grp_DUFT_ap_ctrl_chain_fu_39_wr_data;
reg   [31:0] grp_DUFT_ap_ctrl_chain_fu_39_rd_wr;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state5;
reg    grp_DUFT_ap_ctrl_chain_fu_39_ap_start_reg;
wire   [0:0] icmp_ln14_fu_52_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 grp_DUFT_ap_ctrl_chain_fu_39_ap_start_reg = 1'b0;
end

DUFT_ap_ctrl_chain grp_DUFT_ap_ctrl_chain_fu_39(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_DUFT_ap_ctrl_chain_fu_39_ap_start),
    .ap_ce(grp_DUFT_ap_ctrl_chain_fu_39_ap_ce),
    .ap_done(grp_DUFT_ap_ctrl_chain_fu_39_ap_done),
    .ap_ready(grp_DUFT_ap_ctrl_chain_fu_39_ap_ready),
    .ap_continue(grp_DUFT_ap_ctrl_chain_fu_39_ap_continue),
    .addr(grp_DUFT_ap_ctrl_chain_fu_39_addr),
    .wr_data(grp_DUFT_ap_ctrl_chain_fu_39_wr_data),
    .rd_wr(grp_DUFT_ap_ctrl_chain_fu_39_rd_wr),
    .ap_return(grp_DUFT_ap_ctrl_chain_fu_39_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_DUFT_ap_ctrl_chain_fu_39_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
            grp_DUFT_ap_ctrl_chain_fu_39_ap_start_reg <= 1'b1;
        end else if ((grp_DUFT_ap_ctrl_chain_fu_39_ap_ready == 1'b1)) begin
            grp_DUFT_ap_ctrl_chain_fu_39_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((grp_DUFT_ap_ctrl_chain_fu_39_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_reg_66 <= grp_DUFT_ap_ctrl_chain_fu_39_ap_return;
    end
end

always @ (*) begin
    if (((grp_DUFT_ap_ctrl_chain_fu_39_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_DUFT_ap_ctrl_chain_fu_39_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((grp_DUFT_ap_ctrl_chain_fu_39_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        dut_output_ap_vld = 1'b1;
    end else begin
        dut_output_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_DUFT_ap_ctrl_chain_fu_39_addr = 32'd4278190080;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_DUFT_ap_ctrl_chain_fu_39_addr = 32'd4278190081;
    end else begin
        grp_DUFT_ap_ctrl_chain_fu_39_addr = 'bx;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_DUFT_ap_ctrl_chain_fu_39_ap_ce = 1'b0;
    end else begin
        grp_DUFT_ap_ctrl_chain_fu_39_ap_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_DUFT_ap_ctrl_chain_fu_39_rd_wr = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_DUFT_ap_ctrl_chain_fu_39_rd_wr = 32'd1;
    end else begin
        grp_DUFT_ap_ctrl_chain_fu_39_rd_wr = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2))) begin
        grp_DUFT_ap_ctrl_chain_fu_39_wr_data = test_input;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1))) begin
        grp_DUFT_ap_ctrl_chain_fu_39_wr_data = 32'd305419896;
    end else begin
        grp_DUFT_ap_ctrl_chain_fu_39_wr_data = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_DUFT_ap_ctrl_chain_fu_39_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((grp_DUFT_ap_ctrl_chain_fu_39_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_return = icmp_ln14_fu_52_p2;

assign dut_output = tmp_reg_66;

assign grp_DUFT_ap_ctrl_chain_fu_39_ap_continue = 1'b1;

assign grp_DUFT_ap_ctrl_chain_fu_39_ap_start = grp_DUFT_ap_ctrl_chain_fu_39_ap_start_reg;

assign icmp_ln14_fu_52_p2 = ((tmp_reg_66 == test_input) ? 1'b1 : 1'b0);

endmodule //top_standalone
